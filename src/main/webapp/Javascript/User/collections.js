// Kh·ªüi t·∫°o bi·∫øn l∆∞u tr·ªØ d·ªØ li·ªáu
let collectionsData = [];
let currentCollectionId = null;

// Load d·ªØ li·ªáu khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', async function() {
    try {
        // L·∫•y th√¥ng tin user
        if (typeof window.fetchUserInfo === 'function') {
            const user = await window.fetchUserInfo();
            if (user && user.name) {
                document.getElementById('collections-username').textContent = 'üë§ ' + user.name;
            }
        }

        // L·∫•y danh s√°ch b·ªô s∆∞u t·∫≠p
        collectionsData = await getUserCollections();
        console.log('Danh s√°ch b·ªô s∆∞u t·∫≠p:', collectionsData); // Debug log
        if (collectionsData && collectionsData.length > 0) {
            renderCollectionsList(collectionsData);
        } else {
            document.getElementById('collections-list').innerHTML = 
                '<div class="empty-message">B·∫°n ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o. H√£y t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi!</div>';
        }
        
        // Th√™m s·ª± ki·ªán cho n√∫t t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi
        const createBtn = document.getElementById('create-collection-btn');
        if (createBtn) {
            createBtn.addEventListener('click', showCreateCollectionPopup);
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        document.getElementById('collections-list').innerHTML = 
            '<div class="error-message">C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.</div>';
    }
});

// Render danh s√°ch b·ªô s∆∞u t·∫≠p
function renderCollectionsList(collections) {
    const collectionsList = document.getElementById('collections-list');
    if (!collectionsList) return;

    console.log('Collections data:', collections);

    if (!collections || collections.length === 0) {
        collectionsList.innerHTML = `
            <div class="empty-message">
                <div style="font-size: 2em; margin-bottom: 10px;">üìö</div>
                <div>B·∫°n ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o</div>
                <div style="margin-top: 10px; color: #666;">H√£y t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc t·ª´ v·ª±ng!</div>
            </div>
        `;
        return;
    }

    collectionsList.innerHTML = collections.map(collection => {
        const collectionId = collection.collectionId;
        console.log('Processing collection:', collection);

        if (!collectionId) {
            console.error('Kh√¥ng t√¨m th·∫•y ID b·ªô s∆∞u t·∫≠p trong d·ªØ li·ªáu:', collection);
            return '';
        }

        return `
            <div class="collection-card" data-collection-id="${collectionId}" onclick="showCollectionWords('${collectionId}')">
                <div class="collection-header">
                    <h3>üìö ${collection.name}</h3>
                    <div class="collection-actions">
                        <button type="button" class="btn-icon" onclick="event.stopPropagation(); handleEditClick('${collectionId}')">‚úèÔ∏è</button>
                        <button type="button" class="btn-icon" onclick="event.stopPropagation(); showDeleteCollectionPopup('${collectionId}')">üóëÔ∏è</button>
                    </div>
                </div>
                <div class="collection-stats">
                    <span>üìù ${collection.wordCount || 0} t·ª´</span>
                    <span>${collection.isPublic ? 'üåê C√¥ng khai' : 'üîí Ri√™ng t∆∞'}</span>
                    <span>üïí C·∫≠p nh·∫≠t: ${formatDate(collection.updatedAt)}</span>
                </div>
            </div>
        `;
    }).join('');
}

// X·ª≠ l√Ω s·ª± ki·ªán click n√∫t s·ª≠a
function handleEditClick(collectionId) {
    console.log('handleEditClick called with ID:', collectionId);
    editCollection(parseInt(collectionId));
}

// Load t·ª´ v·ª±ng trong b·ªô s∆∞u t·∫≠p
async function loadCollectionWords(collectionId) {
    if (!collectionId) {
        console.error('ID b·ªô s∆∞u t·∫≠p kh√¥ng h·ª£p l·ªá');
        return;
    }

    const wordsContainer = document.getElementById(`words-${collectionId}`);
    if (!wordsContainer) return;

    try {
        const words = await getWordsInCollection(collectionId);
        
        if (!words || words.length === 0) {
            wordsContainer.innerHTML = `
                <div class="empty-message" style="padding: 20px; text-align: center;">
                    <div style="font-size: 2em; margin-bottom: 10px;">üìù</div>
                    <div>B·ªô s∆∞u t·∫≠p n√†y ch∆∞a c√≥ t·ª´ n√†o</div>
                    <div style="margin-top: 10px; color: #666;">H√£y th√™m t·ª´ v√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc!</div>
                </div>
            `;
            return;
        }

        wordsContainer.innerHTML = words.map(word => `
            <div class="word-item">
                <div class="word-info">
                    <span class="word-text">${word.word}</span>
                    <span class="word-pronunciation">${word.pronunciation}</span>
                </div>
                <div class="word-actions">
                    <button onclick="playWordSound('${word.sound}')" class="btn-icon">üîä</button>
                    <button onclick="removeWordFromCollection('${collectionId}', '${word.wordId}')" class="btn-icon">‚ùå</button>
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('L·ªói khi t·∫£i t·ª´ v·ª±ng:', error);
        wordsContainer.innerHTML = `
            <div class="error-message" style="padding: 20px; text-align: center;">
                <div style="font-size: 2em; margin-bottom: 10px;">‚ö†Ô∏è</div>
                <div>C√≥ l·ªói x·∫£y ra khi t·∫£i t·ª´ v·ª±ng</div>
                <div style="margin-top: 10px; color: #666;">Vui l√≤ng th·ª≠ l·∫°i sau</div>
            </div>
        `;
    }
}

// Th√™m h√†m ph√°t √¢m t·ª´
function playWordSound(soundFile) {
    if (!soundFile) return;
    const audio = new Audio(`${window.APP_CONFIG.BASE_PATH}Assets/Sounds/${soundFile}`);
    audio.play().catch(error => {
        console.error('L·ªói khi ph√°t √¢m:', error);
    });
}

// Hi·ªÉn th·ªã popup t·∫°o b·ªô s∆∞u t·∫≠p m·ªõi
function showCreateCollectionPopup() {
    const popup = document.getElementById('popup');
    if (!popup) return;

    popup.innerHTML = `
        <div class="popup-content">
            <span class="popup-close" onclick="closePopup()">&times;</span>
            <h3>üìö T·∫°o b·ªô s∆∞u t·∫≠p m·ªõi</h3>
            <input type="text" id="new-collection-name" placeholder="Nh·∫≠p t√™n b·ªô s∆∞u t·∫≠p" class="input-field">
            <div class="popup-actions">
                <button class="btn" onclick="createNewCollection()">T·∫°o m·ªõi</button>
                <button class="btn" onclick="closePopup()">H·ªßy</button>
            </div>
        </div>
    `;
    popup.style.display = 'flex';
}

// T·∫°o b·ªô s∆∞u t·∫≠p m·ªõi
async function createNewCollection() {
    const nameInput = document.getElementById('new-collection-name');
    if (!nameInput) return;

    const name = nameInput.value.trim();
    if (!name) {
        alert('Vui l√≤ng nh·∫≠p t√™n b·ªô s∆∞u t·∫≠p');
        return;
    }

    try {
        const collectionId = await createCollection(name);
        if (collectionId) {
            alert('T·∫°o b·ªô s∆∞u t·∫≠p th√†nh c√¥ng!');
            closePopup();
            // T·∫£i l·∫°i danh s√°ch b·ªô s∆∞u t·∫≠p
            collectionsData = await getUserCollections();
            renderCollectionsList(collectionsData);
        }
    } catch (error) {
        console.error('L·ªói khi t·∫°o b·ªô s∆∞u t·∫≠p:', error);
        alert('C√≥ l·ªói x·∫£y ra khi t·∫°o b·ªô s∆∞u t·∫≠p');
    }
}

// C·∫≠p nh·∫≠t b·ªô s∆∞u t·∫≠p
async function handleUpdateCollection(collectionId) {
    if (!collectionId) {
        console.error('ID b·ªô s∆∞u t·∫≠p kh√¥ng h·ª£p l·ªá');
        return;
    }

    const nameInput = document.getElementById('edit-collection-name');
    if (!nameInput) {
        console.error('Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng input t√™n');
        return;
    }

    const name = nameInput.value.trim();

    if (!name) {
        alert('Vui l√≤ng nh·∫≠p t√™n b·ªô s∆∞u t·∫≠p');
        return;
    }

    if (name.length < 3) {
        alert('T√™n b·ªô s∆∞u t·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
        return;
    }

    if (name.length > 50) {
        alert('T√™n b·ªô s∆∞u t·∫≠p kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±');
        return;
    }

    try {
        // G·ªçi API t·ª´ collectionsAPI.js
        const success = await updateCollection(collectionId, name);
        if (success) {
            alert('C·∫≠p nh·∫≠t b·ªô s∆∞u t·∫≠p th√†nh c√¥ng!');
            closePopup();
            // T·∫£i l·∫°i danh s√°ch b·ªô s∆∞u t·∫≠p
            collectionsData = await getUserCollections();
            renderCollectionsList(collectionsData);
        }
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t b·ªô s∆∞u t·∫≠p:', error);
        alert(error.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b·ªô s∆∞u t·∫≠p');
    }
}

// Ch·ªânh s·ª≠a b·ªô s∆∞u t·∫≠p
async function editCollection(collectionId) {
    console.log('editCollection called with ID:', collectionId);
    
    if (!collectionId) {
        console.error('ID b·ªô s∆∞u t·∫≠p kh√¥ng h·ª£p l·ªá');
        return;
    }

    // T√¨m collection trong m·∫£ng collectionsData
    const collection = collectionsData.find(c => c.collectionId === collectionId);

    if (!collection) {
        console.error('Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p v·ªõi ID:', collectionId);
        return;
    }

    // Ki·ªÉm tra n·∫øu l√† b·ªô s∆∞u t·∫≠p c√¥ng khai
    if (collection.isPublic) {
        alert('Kh√¥ng th·ªÉ ch·ªânh s·ª≠a b·ªô s∆∞u t·∫≠p c√¥ng khai');
        return;
    }

    const popup = document.getElementById('popup');
    if (!popup) {
        console.error('Kh√¥ng t√¨m th·∫•y element popup');
        return;
    }

    popup.innerHTML = `
        <div class="popup-content">
            <span class="popup-close" onclick="closePopup()">&times;</span>
            <h3>‚úèÔ∏è Ch·ªânh s·ª≠a b·ªô s∆∞u t·∫≠p</h3>
            <div class="edit-form">
                <div class="form-group">
                    <label for="edit-collection-name">T√™n b·ªô s∆∞u t·∫≠p:</label>
                    <input type="text" 
                           id="edit-collection-name" 
                           value="${collection.name}" 
                           class="input-field"
                           required
                           minlength="3"
                           maxlength="50"
                           placeholder="Nh·∫≠p t√™n b·ªô s∆∞u t·∫≠p">
                </div>
                <div class="popup-actions">
                    <button type="button" class="btn" onclick="handleUpdateCollection('${collectionId}')">L∆∞u thay ƒë·ªïi</button>
                    <button type="button" class="btn btn-secondary" onclick="closePopup()">H·ªßy</button>
                </div>
            </div>
        </div>
    `;
    popup.style.display = 'flex';
}

// X√≥a b·ªô s∆∞u t·∫≠p
async function showDeleteCollectionPopup(collectionId) {
    console.log('showDeleteCollectionPopup called with ID:', collectionId); // Debug log
    
    if (!collectionId) {
        console.error('ID b·ªô s∆∞u t·∫≠p kh√¥ng h·ª£p l·ªá');
        return;
    }

    const popup = document.getElementById('popup');
    if (!popup) return;

    popup.innerHTML = `
        <div class="popup-content">
            <span class="popup-close" onclick="closePopup()">&times;</span>
            <h3>üóëÔ∏è X√≥a b·ªô s∆∞u t·∫≠p</h3>
            <div class="delete-confirmation">
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b·ªô s∆∞u t·∫≠p n√†y?</p>
                <p class="warning-text">‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!</p>
            </div>
            <div class="popup-actions">
                <button class="btn btn-danger" onclick="confirmDeleteCollection('${collectionId}')">X√≥a</button>
                <button class="btn btn-secondary" onclick="closePopup()">H·ªßy</button>
            </div>
        </div>
    `;
    popup.style.display = 'flex';
}

// X√°c nh·∫≠n x√≥a b·ªô s∆∞u t·∫≠p
async function confirmDeleteCollection(collectionId) {
    if (!collectionId) {
        console.error('ID b·ªô s∆∞u t·∫≠p kh√¥ng h·ª£p l·ªá');
        return;
    }

    try {
        console.log('ƒêang x√≥a b·ªô s∆∞u t·∫≠p v·ªõi ID:', collectionId); // Debug log
        const success = await deleteCollection(collectionId);
        if (success) {
            alert('X√≥a b·ªô s∆∞u t·∫≠p th√†nh c√¥ng!');
            closePopup();
            // T·∫£i l·∫°i danh s√°ch b·ªô s∆∞u t·∫≠p
            collectionsData = await getUserCollections();
            renderCollectionsList(collectionsData);
        }
    } catch (error) {
        console.error('L·ªói khi x√≥a b·ªô s∆∞u t·∫≠p:', error);
        alert(error.message || 'C√≥ l·ªói x·∫£y ra khi x√≥a b·ªô s∆∞u t·∫≠p');
    }
}

// X√≥a t·ª´ kh·ªèi b·ªô s∆∞u t·∫≠p
async function removeWordFromCollection(collectionId, wordId) {
    if (!collectionId || !wordId) {
        console.error('ID b·ªô s∆∞u t·∫≠p ho·∫∑c t·ª´ kh√¥ng h·ª£p l·ªá');
        return;
    }

    try {
        const success = await deleteWordFromCollection(collectionId, wordId);
        if (success) {
            alert('X√≥a t·ª´ kh·ªèi b·ªô s∆∞u t·∫≠p th√†nh c√¥ng!');
            // T·∫£i l·∫°i danh s√°ch t·ª´ trong b·ªô s∆∞u t·∫≠p
            showCollectionWords(collectionId);
        }
    } catch (error) {
        console.error('L·ªói khi x√≥a t·ª´:', error);
        alert(error.message || 'C√≥ l·ªói x·∫£y ra khi x√≥a t·ª´ kh·ªèi b·ªô s∆∞u t·∫≠p');
    }
}

// Hi·ªÉn th·ªã danh s√°ch t·ª´ trong b·ªô s∆∞u t·∫≠p
async function showCollectionWords(collectionId) {
    const popup = document.getElementById('popup');
    if (!popup) return;

    popup.innerHTML = `
        <div class="popup-content">
            <span class="popup-close" onclick="closePopup()">&times;</span>
            <div class="words-list-container">
                <h3>Danh s√°ch t·ª´ v·ª±ng</h3>
                <div id="words-list" class="words-list">
                    <div class="loading">ƒêang t·∫£i...</div>
                </div>
            </div>
        </div>
    `;
    popup.style.display = 'flex';

    try {
        const words = await getWordsInCollection(collectionId);
        const wordsList = document.getElementById('words-list');
        
        if (!words || words.length === 0) {
            wordsList.innerHTML = `
                <div class="empty-message">
                    <div style="font-size: 2em; margin-bottom: 10px;">üìù</div>
                    <div>B·ªô s∆∞u t·∫≠p n√†y ch∆∞a c√≥ t·ª´ n√†o</div>
                    <div style="margin-top: 10px; color: #666;">H√£y th√™m t·ª´ v√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc!</div>
                </div>
            `;
            return;
        }

        wordsList.innerHTML = words.map(word => `
            <div class="word-item">
                <div class="word-info">
                    <span class="word-text">${word.word}</span>
                    <span class="word-pronunciation">${word.pronunciation}</span>
                </div>
                <div class="word-actions">
                    <button onclick="playWordSound('${word.sound}')" class="btn-icon">üîä</button>
                    <button onclick="removeWordFromCollection('${collectionId}', '${word.wordId}')" class="btn-icon">‚ùå</button>
                </div>
            </div>
        `).join('');
    } catch (error) {
        console.error('L·ªói khi t·∫£i t·ª´ v·ª±ng:', error);
        document.getElementById('words-list').innerHTML = `
            <div class="error-message">
                <div style="font-size: 2em; margin-bottom: 10px;">‚ö†Ô∏è</div>
                <div>C√≥ l·ªói x·∫£y ra khi t·∫£i t·ª´ v·ª±ng</div>
                <div style="margin-top: 10px; color: #666;">Vui l√≤ng th·ª≠ l·∫°i sau</div>
            </div>
        `;
    }
}

// ƒê√≥ng popup
function closePopup() {
    const popup = document.getElementById('popup');
    if (popup) {
        popup.style.display = 'none';
    }
}

// Format ng√†y th√°ng
function formatDate(dateString) {
    if (!dateString) return 'Ch∆∞a c·∫≠p nh·∫≠t';
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

// D·ªØ li·ªáu m·∫´u (b·∫°n s·∫Ω thay b·∫±ng API th·ª±c t·∫ø)
const vocabData = [
  {
    word: 'apple',
    phonetic: '/Àà√¶p.…ôl/',
    type: 'noun',
    meaning: 'qu·∫£ t√°o',
    level: 'A1',
    course: 'B√†i 1',
    example: 'I eat an apple every day.'
  },
  {
    word: 'run',
    phonetic: '/r ån/',
    type: 'verb',
    meaning: 'ch·∫°y',
    level: 'A2',
    course: 'B√†i 2',
    example: 'He can run very fast.'
  }
];
const readingData = [
  {
    title: 'The Great Adventure',
    level: 'A1',
    readCount: 2,
    lastRead: '3 ng√†y tr∆∞·ªõc',
    note: '',
    wordCount: 150,
    suggest: 'G·ª£i √Ω h·ªçc th√™m 3 t·ª´ m·ªõi t·ª´ b√†i'
  },
  {
    title: 'At the Supermarket',
    level: 'A2',
    readCount: 1,
    lastRead: '1 tu·∫ßn tr∆∞·ªõc',
    note: 'T·ª´ m·ªõi nhi·ªÅu',
    wordCount: 120,
    suggest: 'G·ª£i √Ω h·ªçc th√™m 2 t·ª´ m·ªõi t·ª´ b√†i'
  }
];

// D·ªØ li·ªáu m·∫´u cho topic
const topics = {
  food: {
    name: "üçΩÔ∏è ƒê·ªì ƒÉn & ƒê·ªì u·ªëng",
    vocab: [
      { word: "apple", type: "noun", meaning: "qu·∫£ t√°o", level: "A1", example: "I eat an apple." }
      // ... th√™m t·ª´
    ],
    grammar: [
      { rule: "There is/There are", example: "There are apples on the table." }
      // ... th√™m ng·ªØ ph√°p
    ],
    reading: [
      { title: "A trip to the market", level: "A1", summary: "..." }
      // ... th√™m b√†i ƒë·ªçc
    ],
    idioms: [
      { idiom: "A piece of cake", meaning: "d·ªÖ nh∆∞ ƒÉn b√°nh" }
      // ... th√™m th√†nh ng·ªØ
    ]
  },
  // ... c√°c topic kh√°c
};

// G√°n t√™n user (demo, th·ª±c t·∫ø l·∫•y t·ª´ API)
document.addEventListener('DOMContentLoaded', async function() {
  if (typeof window.fetchUserInfo === 'function') {
    const user = await window.fetchUserInfo();
    if (user && user.name) {
      document.getElementById('collections-username').textContent = 'üë§ ' + user.name;
    }
  }
  renderVocabList(vocabData);
  renderReadingList(readingData);
});

// Tabs
const tabVocab = document.getElementById('tab-vocab');
const tabReading = document.getElementById('tab-reading');
const vocabList = document.getElementById('vocab-list');
const readingList = document.getElementById('reading-list');

tabVocab.onclick = function() {
  tabVocab.classList.add('active');
  tabReading.classList.remove('active');
  vocabList.style.display = '';
  readingList.style.display = 'none';
};
tabReading.onclick = function() {
  tabReading.classList.add('active');
  tabVocab.classList.remove('active');
  vocabList.style.display = 'none';
  readingList.style.display = '';
};

// Filter
const searchInput = document.getElementById('searchInput');
const levelFilter = document.getElementById('levelFilter');
const typeFilter = document.getElementById('typeFilter');
const courseFilter = document.getElementById('courseFilter');

[searchInput, levelFilter, typeFilter, courseFilter].forEach(el => {
  el.addEventListener('input', filterVocab);
  el.addEventListener('change', filterVocab);
});

function filterVocab() {
  let filtered = vocabData.filter(item => {
    const keyword = searchInput.value.trim().toLowerCase();
    const level = levelFilter.value;
    const type = typeFilter.value;
    const course = courseFilter.value;
    return (
      (!keyword || item.word.toLowerCase().includes(keyword) || item.meaning.toLowerCase().includes(keyword)) &&
      (!level || item.level === level) &&
      (!type || item.type === type) &&
      (!course || item.course === course)
    );
  });
  renderVocabList(filtered);
}

// Render vocab cards
function renderVocabList(data) {
  vocabList.innerHTML = data.map(item => `
    <div class="vocab-card" onclick="showVocabPopup('${item.word}')">
      <div class="vocab-word">üçé ${item.word} <span class="vocab-phonetic">${item.phonetic}</span></div>
      <div class="vocab-meta">üß† ${item.type} | üáªüá≥ ${item.meaning} | üìò ${item.level} ‚Äì ${item.course}</div>
      <div class="vocab-example">üìñ V√≠ d·ª•: "${item.example}"</div>
      <div style="color:#4285f4;font-size:0.95rem;">‚ñ∂ Nh·∫•n ƒë·ªÉ xem th√™m</div>
    </div>
  `).join('');
}

// Render reading cards
function renderReadingList(data) {
  readingList.innerHTML = data.map(item => `
    <div class="reading-card" onclick="showReadingPopup('${item.title}')">
      <div class="reading-title">üìö ${item.title}</div>
      <div class="reading-meta">üìñ C·∫•p ƒë·ªô: ${item.level} | üß† ƒê√£ ƒë·ªçc: ${item.readCount} l·∫ßn | üïí L·∫ßn cu·ªëi: ${item.lastRead}</div>
      <div class="reading-note">${item.note ? 'üìå ' + item.note : ''} ${item.wordCount ? 'üß† S·ªë t·ª´: ' + item.wordCount : ''}</div>
      <div style="color:#f44336;font-size:0.95rem;">‚ñ∂ Nh·∫•n ƒë·ªÉ ƒë·ªçc l·∫°i ho·∫∑c l∆∞u</div>
    </div>
  `).join('');
}

// Popup vocab
window.showVocabPopup = function(word) {
  const item = vocabData.find(v => v.word === word);
  if (!item) return;
  document.getElementById('popup').innerHTML = `
    <div class="popup-content">
      <span class="popup-close" onclick="closePopup()">&times;</span>
      <h3>üçé ${item.word} <span class="vocab-phonetic">${item.phonetic}</span></h3>
      <div> <b>${item.type}</b> | üáªüá≥ <b>${item.meaning}</b></div>
      <div>üìò <b>${item.level}</b> ‚Äì <b>${item.course}</b></div>
      <div>üìñ <b>V√≠ d·ª•:</b> <i>${item.example}</i></div>
      <textarea placeholder="Th√™m ghi ch√∫ c√° nh√¢n..." style="width:100%;margin:12px 0;"></textarea>
      <div style="margin-top:12px;display:flex;gap:12px;">
        <button class="btn" onclick="alert('ƒê√£ l∆∞u ghi ch√∫!')">L∆∞u ghi ch√∫</button>
        <button class="btn" onclick="alert('ƒê√£ x√≥a kh·ªèi b·ªô s∆∞u t·∫≠p!')">X√≥a kh·ªèi b·ªô s∆∞u t·∫≠p</button>
      </div>
    </div>
  `;
  document.getElementById('popup').style.display = 'flex';
}

// Popup reading
window.showReadingPopup = function(title) {
  const item = readingData.find(r => r.title === title);
  if (!item) return;
  document.getElementById('popup').innerHTML = `
    <div class="popup-content">
      <span class="popup-close" onclick="closePopup()">&times;</span>
      <h3>üìö ${item.title}</h3>
      <div>üìñ <b>C·∫•p ƒë·ªô:</b> ${item.level}</div>
      <div>üß† <b>ƒê√£ ƒë·ªçc:</b> ${item.readCount} l·∫ßn</div>
      <div>üïí <b>L·∫ßn cu·ªëi:</b> ${item.lastRead}</div>
      <div>üß† <b>S·ªë t·ª´:</b> ${item.wordCount}</div>
      <div>üìå <b>Ghi ch√∫:</b> ${item.note || 'Ch∆∞a c√≥'}</div>
      <div>üìà <b>${item.suggest || ''}</b></div>
      <textarea placeholder="L∆∞u ghi ch√∫..." style="width:100%;margin:12px 0;"></textarea>
      <div style="margin-top:12px;display:flex;gap:12px;">
        <button class="btn" onclick="alert('ƒê√£ l∆∞u ghi ch√∫!')">L∆∞u ghi ch√∫</button>
        <button class="btn" onclick="alert('ƒê√£ x√≥a kh·ªèi b·ªô s∆∞u t·∫≠p!')">X√≥a kh·ªèi b·ªô s∆∞u t·∫≠p</button>
      </div>
    </div>
  `;
  document.getElementById('popup').style.display = 'flex';
}

window.closePopup = function() {
  document.getElementById('popup').style.display = 'none';
}

// X·ª≠ l√Ω click v√†o topic
document.querySelectorAll('.topic-card').forEach(card => {
  card.onclick = function() {
    const topicKey = this.getAttribute('data-topic');
    showTopicDetail(topicKey);
  };
});

function showTopicDetail(topicKey) {
  const topic = topics[topicKey];
  if (!topic) return;
  let html = `
    <div class="topic-detail-header">
      <h2>${topic.name}</h2>
      <div class="topic-detail-tabs">
        <button class="tab-btn active" onclick="showTopicTab('${topicKey}','vocab')">üìò T·ª´ v·ª±ng</button>
        <button class="tab-btn" onclick="showTopicTab('${topicKey}','grammar')">üìô Ng·ªØ ph√°p</button>
        <button class="tab-btn" onclick="showTopicTab('${topicKey}','reading')">üìï B√†i ƒë·ªçc</button>
        <button class="tab-btn" onclick="showTopicTab('${topicKey}','idioms')">üìù Th√†nh ng·ªØ</button>
      </div>
    </div>
    <div id="topic-tab-content"></div>
    <button class="btn" onclick="closeTopicDetail()">‚¨Ö Quay l·∫°i ch·ªß ƒë·ªÅ</button>
  `;
  document.getElementById('topic-detail').innerHTML = html;
  document.getElementById('topic-detail').style.display = '';
  document.querySelector('.collections-topics').style.display = 'none';
  showTopicTab(topicKey, 'vocab');
}

window.showTopicTab = function(topicKey, tab) {
  const topic = topics[topicKey];
  let html = '';
  if (tab === 'vocab') {
    html = topic.vocab.map(item => `
      <div class="vocab-card">
        <div class="vocab-word">üçé ${item.word}</div>
        <div class="vocab-meta">üß† ${item.type} | üáªüá≥ ${item.meaning} | üìò ${item.level}</div>
        <div class="vocab-example">üìñ V√≠ d·ª•: "${item.example}"</div>
      </div>
    `).join('');
  } else if (tab === 'grammar') {
    html = topic.grammar.map(item => `
      <div class="vocab-card" style="background:#fffbe6;">
        <div class="vocab-word">üìô ${item.rule}</div>
        <div class="vocab-example">üìñ V√≠ d·ª•: "${item.example}"</div>
      </div>
    `).join('');
  } else if (tab === 'reading') {
    html = topic.reading.map(item => `
      <div class="reading-card">
        <div class="reading-title">üìï ${item.title}</div>
        <div class="reading-meta">C·∫•p ƒë·ªô: ${item.level}</div>
        <div class="reading-note">${item.summary || ''}</div>
      </div>
    `).join('');
  } else if (tab === 'idioms') {
    html = topic.idioms.map(item => `
      <div class="vocab-card" style="background:#e6fff7;">
        <div class="vocab-word">üìù ${item.idiom}</div>
        <div class="vocab-meta">√ù nghƒ©a: ${item.meaning}</div>
      </div>
    `).join('');
  }
  document.getElementById('topic-tab-content').innerHTML = html || '<div style="color:#888;">Ch∆∞a c√≥ d·ªØ li·ªáu</div>';
  // ƒê·ªïi active tab
  document.querySelectorAll('.topic-detail-tabs .tab-btn').forEach(btn => btn.classList.remove('active'));
  document.querySelectorAll('.topic-detail-tabs .tab-btn')[['vocab','grammar','reading','idioms'].indexOf(tab)].classList.add('active');
};

window.closeTopicDetail = function() {
  document.getElementById('topic-detail').style.display = 'none';
  document.querySelector('.collections-topics').style.display = '';
};
